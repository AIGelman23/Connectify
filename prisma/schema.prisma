generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Message {
  id             String       @id @default(uuid())
  conversationId String
  senderId       String
  content        String
  createdAt      DateTime     @default(now())
  sender         User         @relation(fields: [senderId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model Conversation {
  id           String    @id @default(uuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  messages     Message[]
  participants User[]    @relation("ConversationParticipants")
}

model ConnectionRequest {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  status     String   @default("PENDING")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  receiver   User     @relation("ReceivedConnectionRequests", fields: [receiverId], references: [id])
  sender     User     @relation("SentConnectionRequests", fields: [senderId], references: [id])

  @@unique([senderId, receiverId])
}

model User {
  id                         String              @id @default(uuid())
  name                       String?
  email                      String              @unique
  hashedPassword             String?
  image                      String?
  role                       String              @default("USER")
  createdAt                  DateTime            @default(now())
  resetToken                 String?
  resetTokenExpiry           DateTime?
  receivedConnectionRequests ConnectionRequest[] @relation("ReceivedConnectionRequests")
  sentConnectionRequests     ConnectionRequest[] @relation("SentConnectionRequests")
  sentMessages               Message[]
  taggedInPosts              TaggedFriend[]      @relation("UserTaggedFriends")
  comments                   Comment[]
  notificationsSent          Notification[]      @relation("SenderNotifications")
  notificationsReceived      Notification[]      @relation("UserNotifications")
  posts                      Post[]
  profile                    Profile?
  conversationsJoined        Conversation[]      @relation("ConversationParticipants")
}

model Skill {
  id        String   @id @default(uuid())
  name      String   @unique
  profileId String?
  profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@map("skills")
}

model Education {
  id           String    @id @default(uuid())
  profileId    String
  degree       String
  institution  String
  fieldOfStudy String?
  startDate    DateTime
  endDate      DateTime?
  description  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  profile      Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@map("education")
}

model Profile {
  id                String       @id @default(uuid())
  userId            String       @unique
  bio               String?
  headline          String?
  location          String?
  resumeUrl         String?
  isProfileComplete Boolean      @default(false)
  profilePictureUrl String?
  coverPhotoUrl     String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  education         Education[]
  experiences       Experience[]
  user              User         @relation(fields: [userId], references: [id])
  skills            Skill[]

  @@map("profiles")
}

model Experience {
  id          String    @id @default(uuid())
  profileId   String
  title       String
  company     String
  location    String?
  startDate   DateTime
  endDate     DateTime?
  description String?
  isCurrent   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  profile     Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@map("experiences")
}

model Post {
  id            String         @id @default(uuid())
  content       String?
  authorId      String
  likesCount    Int            @default(0)
  commentsCount Int            @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  imageUrl      String?
  videoUrl      String?
  taggedFriends TaggedFriend[]
  comments      Comment[]
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("posts")
}

model TaggedFriend {
  id     String @id @default(uuid())
  postId String
  userId String
  user   User   @relation("UserTaggedFriends", fields: [userId], references: [id], onDelete: Cascade)
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
}

model Comment {
  id              String    @id @default(uuid())
  content         String
  authorId        String
  postId          String
  likesCount      Int       @default(0)
  createdAt       DateTime  @default(now())
  parentCommentId String?
  parent          Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [id])
  replies         Comment[] @relation("CommentReplies")
  post            Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  author          User      @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Notification {
  id          String   @id @default(uuid())
  recipientId String
  type        String
  message     String
  read        Boolean  @default(false)
  senderId    String?
  targetId    String?
  createdAt   DateTime @default(now())
  sender      User?    @relation("SenderNotifications", fields: [senderId], references: [id])
  recipient   User     @relation("UserNotifications", fields: [recipientId], references: [id], onDelete: Cascade)

  @@map("notifications")
}
